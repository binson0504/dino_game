<?xml version="1.0" encoding="utf-8"?>
<circuit>
  <version>1</version>
  <attributes/>
  <visualElements>
    <visualElement>
      <elementName>LedMatrix</elementName>
      <elementAttributes>
        <entry>
          <string>colAddrBits</string>
          <int>4</int>
        </entry>
        <entry>
          <string>rowDataBits</string>
          <int>6</int>
        </entry>
      </elementAttributes>
      <pos x="-620" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>External</elementName>
      <elementAttributes>
        <entry>
          <string>applicationType</string>
          <appType>GHDL</appType>
        </entry>
        <entry>
          <string>Label</string>
          <string>control_circuit</string>
        </entry>
        <entry>
          <string>externalInputs</string>
          <string>clk,start,jump,squat,reset,random:2</string>
        </entry>
        <entry>
          <string>Code</string>
          <string>library ieee;
use ieee.std_logic_1164.all;

entity control_circuit is	
	port	(
		-- Input ports
		clk, start, jump, squat,reset: in std_logic;
		random : in std_logic_vector(1 downto 0);	
		-- Output ports
		row_display : out std_logic_vector(5 downto 0);	
		col_display : out std_logic_vector(3 downto 0));
end control_circuit;

architecture state_graph of control_circuit is	
	signal out_vector : std_logic_vector(3 downto 0) := &quot;0000&quot;;
	signal state : std_logic_vector(2 downto 0):= &quot;000&quot;;

------------player signal-----------------------------------------------------
	signal pattern_jump : std_logic_vector(5 downto 0) := &quot;001110&quot;;
	signal pattern_squat: std_logic_vector(5 downto 0) := &quot;100000&quot;;
	signal pattern_start: std_logic_vector(5 downto 0) := &quot;111000&quot;;
	signal pattern_reset: std_logic_vector(5 downto 0) := &quot;000000&quot;;
	signal player_row: std_logic_vector(5 downto 0) ;
	signal player_col: std_logic := &apos;0&apos;;
------------block signal------------------------------------------------------
	signal low_block: std_logic_vector(5 downto 0) := &quot;100000&quot;;
	signal high_block: std_logic_vector(5 downto 0) := &quot;001000&quot;;
	signal no_block: std_logic_vector(5 downto 0) := &quot;000000&quot;;
	signal block_temp: std_logic_vector(5 downto 0) ;
	signal block_row: std_logic_vector(5 downto 0) ;
	signal block_col: std_logic_vector(3 downto 0) ;
	signal rand_num : integer := 0 ;
	
------------------------------------------------------------------------------
Begin
------------------display-----------------------------------------------------
row_display(0) &lt;= player_row(0); --or block(0);
row_display(1) &lt;= player_row(1); --or block(1);
row_display(2) &lt;= player_row(2); --or block(2);
row_display(3) &lt;= player_row(3); --or block(3);
row_display(4) &lt;= player_row(4); --or block(4);
row_display(5) &lt;= player_row(5); --or block(5);

col_display(0) &lt;= &apos;0&apos;; --or block(0);
col_display(1) &lt;= player_col; --or block(0);
col_display(2) &lt;= &apos;0&apos;; --or block(0);
col_display(3) &lt;= &apos;0&apos;; --or block(0);
----------------player figure-------------------------------------------------
	player_row &lt;= pattern_jump when  (jump = &apos;1&apos;) and (start = &apos;1&apos;)
		else pattern_squat when (squat = &apos;1&apos;) and (start = &apos;1&apos;)
		else pattern_start when (squat = &apos;0&apos;) and (jump = &apos;0&apos;) and (start = &apos;1&apos;)
		else pattern_reset;
	player_col &lt;= &apos;1&apos; when  (start = &apos;1&apos;)
		else &apos;0&apos;;
----------------block generator-----------------------------------------------
	rand_num &lt;= to_integer(unsigened(num));	
	block_temp &lt;= low_block when  (rand_num = 0) and (start = &apos;1&apos;)
		else high_block when (rand_num = 1) and (start = &apos;1&apos;)
		else no_block when (rand_num = 2) and (start = &apos;1&apos;)
		else no_block;

	process(clk)
	begin
		if over = &apos;1&apos; then
			pattern_0 &lt;= &quot;00000000000000000000&quot;;
			pattern_1 &lt;= &quot;00000000000000000000&quot;;
		elsif rising_edge(CLK) then
			pattern_0 &lt;= pattern_0(18 downto 0) &amp; rand0;
			pattern_1 &lt;= pattern_1(18 downto 0) &amp; rand1;
		end if;

		if(block_col = &quot;0000&quot;) then block_col &lt;= &quot;0001&quot;;
		elsif(block_col = &quot;0001&quot;) then  block_col &lt;= &quot;0010&quot;; block_row &lt;= block_temp;
		elsif(block_col = &quot;0010&quot;) then  block_col &lt;= &quot;0010&quot;;
		elsif(block_col = &quot;0011&quot;) then  block_col &lt;= &quot;0010&quot;;
		elsif(block_col = &quot;0100&quot;) then  block_col &lt;= &quot;0010&quot;;
		elsif(block_col = &quot;0101&quot;) then  block_col &lt;= &quot;0010&quot;;
		elsif(block_col = &quot;0110&quot;) then  block_col &lt;= &quot;0010&quot;;
		elsif(block_col = &quot;0111&quot;) then  block_col &lt;= &quot;0010&quot;;
		elsif(block_col = &quot;1000&quot;) then  block_col &lt;= &quot;0010&quot;;
		elsif(block_col = &quot;1001&quot;) then  block_col &lt;= &quot;0010&quot;;
		elsif(block_col = &quot;1010&quot;) then  block_col &lt;= &quot;0010&quot;;
		elsif(block_col = &quot;1011&quot;) then  block_col &lt;= &quot;0010&quot;;
		elsif(block_col = &quot;1100&quot;) then  block_col &lt;= &quot;0010&quot;;
		elsif(block_col = &quot;1101&quot;) then  block_col &lt;= &quot;0010&quot;;
		elsif(block_col = &quot;1110&quot;) then  block_col &lt;= &quot;0010&quot;;		elsif(block_col = &quot;0011&quot;) then  block_col &lt;= &quot;0010&quot;;
		elsif(block_col = &quot;1111&quot;) then  block_col &lt;= &quot;0010&quot;;
		end if;



end state_graph;</string>
        </entry>
        <entry>
          <string>externalOutputs</string>
          <string>row_display:6,col_display:4</string>
        </entry>
        <entry>
          <string>Width</string>
          <int>9</int>
        </entry>
      </elementAttributes>
      <pos x="-880" y="420"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes>
        <entry>
          <string>mapToKey</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Label</string>
          <string>UP</string>
        </entry>
      </elementAttributes>
      <pos x="-980" y="440"/>
    </visualElement>
    <visualElement>
      <elementName>Button</elementName>
      <elementAttributes>
        <entry>
          <string>mapToKey</string>
          <boolean>true</boolean>
        </entry>
        <entry>
          <string>Label</string>
          <string>DOWN</string>
        </entry>
      </elementAttributes>
      <pos x="-980" y="500"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>start</string>
        </entry>
      </elementAttributes>
      <pos x="-920" y="380"/>
    </visualElement>
    <visualElement>
      <elementName>In</elementName>
      <elementAttributes>
        <entry>
          <string>Label</string>
          <string>reset</string>
        </entry>
      </elementAttributes>
      <pos x="-920" y="540"/>
    </visualElement>
  </visualElements>
  <wires>
    <wire>
      <p1 x="-900" y="480"/>
      <p2 x="-880" y="480"/>
    </wire>
    <wire>
      <p1 x="-700" y="420"/>
      <p2 x="-620" y="420"/>
    </wire>
    <wire>
      <p1 x="-900" y="420"/>
      <p2 x="-880" y="420"/>
    </wire>
    <wire>
      <p1 x="-980" y="500"/>
      <p2 x="-940" y="500"/>
    </wire>
    <wire>
      <p1 x="-700" y="440"/>
      <p2 x="-620" y="440"/>
    </wire>
    <wire>
      <p1 x="-980" y="440"/>
      <p2 x="-880" y="440"/>
    </wire>
    <wire>
      <p1 x="-940" y="460"/>
      <p2 x="-880" y="460"/>
    </wire>
    <wire>
      <p1 x="-920" y="540"/>
      <p2 x="-900" y="540"/>
    </wire>
    <wire>
      <p1 x="-920" y="380"/>
      <p2 x="-900" y="380"/>
    </wire>
    <wire>
      <p1 x="-900" y="480"/>
      <p2 x="-900" y="540"/>
    </wire>
    <wire>
      <p1 x="-900" y="380"/>
      <p2 x="-900" y="420"/>
    </wire>
    <wire>
      <p1 x="-940" y="460"/>
      <p2 x="-940" y="500"/>
    </wire>
  </wires>
  <measurementOrdering/>
</circuit>